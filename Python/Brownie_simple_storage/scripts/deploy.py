# TC: We can put all of our logic in one function and call it in the main
'''
1. Brownie works with ganache-cli. On previously creating the project with 'brownie run scripts/deploy.py'
we realized that ganache-cli automatical spits out 10 accounts. Thus the import below 
helps us make use of those accounts (i.e. addresses and private keys)

2. With function invocations, brownie is intelligent enough to know if we are making
a call => a normal view in Solidity terms (i.e. states of values are not changed) OR
a transaction => something that changes the state of values

key parameters to be aware of to use brownie:
config => helps use the yaml file to access parameters
accounts => help access and modify account details offered by GANACHE
network => helps get information on the kind of networks accessible

'''
from brownie  import accounts,network,config, SimpleStorage # this account package natively helps import and make use of the accouts spinned out by ganache-cli
import os

def deploy_simple_storage():
    #------------------------------------------------------
    # WORKING WITH GANACHE-CLI CREATED ACCOUNTS
    #------------------------------------------------------
    #account = accounts[0] # represents account given out at index 0 generated by ganache-cli
    account = get_account() # getting account from GANACHE development or from ETHEREUM / third party ETHEREUM node provider
    
    simple_storage = SimpleStorage.deploy({"from": account}) # way simpler than the deploying approach in web3 which require 1. building transaction, 2. singing a transasction and 3. sending the transaction
    stored_value = simple_storage.retrieveView() # Since this is a view function, we don't need to put '{"from": account}' into the 'retrieveView()' function as done with 'deploy()'
    print(stored_value)
    transaction = simple_storage.store(15,{"from": account})# However since in this case we are doing a 'transaction' and not a view, we have to add '{"from": account}'
    transaction.wait(1) # represents how long we want to wait
    updated_stored_value = simple_storage.retrieveView()
    print(updated_stored_value)
    
    
    #------------------------------------------------------
    # WORKING WITH CUSTOM TEST ACCOUNT CREATED WITH BROWNIE
    #------------------------------------------------------
    # # account = accounts.load("freecodecamp-account") # to work with test account created with brownie
    # # print(account)
    
    # # account = accounts.add(os.getenv("PRIVATE_KEY")) # pulling details from .env file via 'brownie-config.yaml' file
    # # print(account)
    
    # '''
    # pulling environmental variables in .env file through
    # key referencing it (using ('from_key' in this case) in yaml
    # file rather that directly referencing it through the yaml file
    # '''
    # account = accounts.add(config["wallets"]["from_key"]) 
    # print(account)

def get_account(): 
    '''
    # Determining if we are working on a local DEVELOPMENT NETWORK (via GANACHE-CLI)
    # or on an TESTNET (via ETHEREUM or a third party node provider like infura)
    '''
    if(network.show_active() == "development"):# if we are on the development network (local-net); pull from our development network
        return accounts[0]
    else: # otherwise pull from our 'config' file(s); in this case, pull from our online testnet via our config file
        return accounts.add(config["wallets"]["from_key"])
    
def main():
    deploy_simple_storage()